package days2020;

import helpers.MathHelper;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

public class Day18_OperationOrder {

	public static void main(String[] args) {
		System.out.println("answer A: " + runA(textInput()));
		System.out.println("answer B: " + runB(textInput()));
	}

	public static long runA(String input) {
		return Arrays.stream(input.split("\n"))
				.mapToLong(s -> doSum(s))
				.sum();
	}

	public static long runB(String input) {
		return Arrays.stream(input.split("\n"))
				.mapToLong(s -> doSumB(s))
				.sum();
	}

	static long doSumB(String input) {
		return calculateB(sanitizeInput(input));
	}

	private static long calculateB(List<String> list) {
		do {
			simpleAddition(list);
			simpleMultiplication(list);
		} while(list.size() > 1);
		return Long.parseLong(list.get(0));
	}

	private static void simpleAddition(List<String> list) {
		int size = list.size();
		IntStream.range(0, list.size())
				.forEach(i -> {
					int j = list.size() -1 - i;
					if(j > list.size() -1 || j < 0) return;
					if (list.get(j).contains("+") && MathHelper.isNumeric(list.get(j -1)) && MathHelper.isNumeric(list.get(j + 1))) {
						list.set(j, Long.parseLong(list.get(j - 1)) + Long.parseLong(list.get(j + 1)) + "");
						list.remove(j +1);
						list.remove(j -1);
					}
				});

		removeParenthesis(list);
		if(list.size() != size) {
			simpleAddition(list);
		}
	}

	private static void simpleMultiplication(List<String> list) {
		IntStream.range(0, list.size())
				.forEach(i -> {
					int j = list.size() -1 - i;
					if(j > list.size() -1 || j < 0) return;
					if (list.get(j).contains("*") && mayMultiply(list, j)) {
						list.set(j, Long.parseLong(list.get(j - 1)) * Long.parseLong(list.get(j + 1)) + "");
						list.remove(j +1);
						list.remove(j -1);
					}
				});

		removeParenthesis(list);
	}

	private static boolean mayMultiply(List<String> list, int index) {
		// both surrounding values are numeric
		if(!(MathHelper.isNumeric(list.get(index -1)) && MathHelper.isNumeric(list.get(index + 1)))) {
			return false;
		}

		// the previous operation isn't +;
		if ( 0 < index - 2 && list.get(index -2).contains("+"))  {
			return false;
		}

		// the next operation isn't +;
		if (list.size() > index + 2 && list.get(index + 2).contains("+")) {
			return false;
		}
		return true;
	}

	private static void removeParenthesis(List<String> list) {
		IntStream.range(0, list.size())
				.forEach(i -> {
					int j = list.size() -1 - i;
					if(j > list.size() -1 || j < 0) return;
					if (list.get(j).contains("(") && list.get(j + 2).contains(")")) {
						list.remove(j +2);
						list.remove(j);
					}
				});
	}

	private static List<String> sanitizeInput(String input) {
		input = input.replace(")", " ) ");
		input = input.replace("(", "( ");
		input = input.replace("  ", " "); // double spaces
		return Arrays.stream(input.split(" ")).collect(Collectors.toList());
	}

	static long doSum(String input) {
		return calculate(sanitizeInput(input), 0);
	}

	private static long calculate(List<String> list, int index) {
		int currentIndex = index;
		long sum = 0;
		char operation = '+';
		do {
			String item = list.get(currentIndex);
			switch (item.charAt(0)) {
				case '+':
				case '-':
				case '*': operation = item.charAt(0); break;
				case '(':
					calculate(list, currentIndex + 1);
					continue;
				case ')':
					list.set(index - 1, sum + "");
					IntStream.range(index, currentIndex + 1).forEach(i -> list.remove(index));
					return sum;
				default: // number
					long num = Long.parseLong(item);
					switch (operation) {
						case '+': sum += num; break;
						case '-': sum -= num; break;
						case '*': sum *= num; break;
					}
			}
			currentIndex++;
		} while (currentIndex < list.size());
		return sum;
	}

	private static String textInput() {
		return "(8 + 5 + 5) + (8 + (2 * 6) + (6 * 6 * 9 * 8) + 3 + 9 * 8)\n" +
				"(7 + 7 + 3) * 8 * (5 + 9 + 4 + (7 + 8 + 3 * 3 + 9 + 7) + (7 + 6 + 6) * 8) * (4 + 5 * 9)\n" +
				"8 * (3 * (3 + 8 + 4 * 9) + (7 * 9) * (3 * 3 * 3 + 6 * 8 * 2) * 7) + 5 + 2\n" +
				"2 * (2 + 9 + 6 * (5 + 9 * 2 * 2 * 5 * 5) * (6 * 9 + 4 + 8 + 4 * 9))\n" +
				"3 + 2\n" +
				"2 * ((5 * 5 + 9 * 5 * 3 + 7) + (8 * 8 + 4) + 7) * 7\n" +
				"8 * 3 + 4\n" +
				"(5 * 3 * (9 * 9 + 4 * 3) + 2) * (3 + 2 * 2 + (8 + 6) * 3 + 7)\n" +
				"((6 + 4 * 5 + 9 + 7 + 9) + 2 + 4 * 3 + 5) + 5 * 4 + (5 * (2 * 5 + 3 + 8 + 4) * 5 * 8) * 8 + 9\n" +
				"5 * 7 * (2 * 7 * 2 * 4 + 9) + 8 + 3 + 7\n" +
				"2 * (8 + 9 + 5 * 2)\n" +
				"3 * 2 + 6 * (6 + (4 + 9 + 7 * 8 * 5)) * 9\n" +
				"8 + (3 * 5 + (5 + 3) * (2 + 8 + 6) * 2)\n" +
				"(8 + 3 * 2 * (5 * 2 + 3) * 8) + 6 + ((8 + 8 + 4 * 6) * (5 * 4)) + 7\n" +
				"2 * (6 * (3 * 5 + 3) + (2 + 9) * 8) + 6 * 4 * 7\n" +
				"(2 + 7 + 9 * (3 * 3 + 4) + 5 * 5) * 9 * 4\n" +
				"8 + 9 * 5 + 3 * 2 + 7\n" +
				"2 + 9 * 4 + (3 + 9 * (6 + 2 * 2) + 9 * (8 + 8 * 3)) * 8\n" +
				"9 * ((2 + 7) * 4 + 8 + 9 * 9) + 8\n" +
				"(3 * 7 + (8 * 7) + 4 * (3 + 3 * 7 + 7 + 6)) + 2 + 9 * 8\n" +
				"9 * (7 * 6 + (2 + 4 * 2 * 9 + 4)) + 9 * 5 * 3 * (6 + (6 + 8 + 8 + 2 * 5) + 5 * 3)\n" +
				"(6 + 5 * 6) * (3 + 8 * 6) + 8 + 7\n" +
				"(5 * (5 * 2 + 4 * 4 * 5 + 2) * 9 + (2 + 6 * 4 * 2 + 3) * 6) * 4 + ((3 * 7 + 3) + 7) * 8 * 6 * 2\n" +
				"5 + 7 + 9 + 6 * 9 * 3\n" +
				"8 + 2 * 2 * (8 * (4 * 9 + 4 * 8 * 8) * 3)\n" +
				"5 + 5 + 3 + 3 * 7 + (8 + (3 * 9) * 8 * 3)\n" +
				"6 * 8 + (5 * 8 * 4 + (4 + 7 * 4 * 4 * 4)) * 6 * 8\n" +
				"6 * 2 + (2 + 9 * (2 + 2 + 4 * 5 + 6) * (4 * 9)) + 2 * 4 + 6\n" +
				"2 + (8 + (4 + 7 * 5 * 5 + 4)) * 7 + 5 * (2 * 3 * 5 + 6 * 9)\n" +
				"2 * 3 + 5 + (2 + (7 + 5 * 3) * (4 * 3))\n" +
				"(9 + (3 * 7 * 3) * 9) * 6\n" +
				"4 * (2 * 3 * (4 * 3)) * 6 + 7 * 8 * 3\n" +
				"((7 * 6 + 6) + 8) + 8 + (5 + 7 + 4 + 5 + 8) + 5 + 4\n" +
				"(9 * 7 + (3 * 9 + 7 + 5)) + 7 * 2 * (3 * 8 + 6) * 2 + 7\n" +
				"9 * 2 * (5 * (5 + 6 * 6) + 8 * 8 + 7) * (4 + 2) * 7 * 4\n" +
				"3 * (9 + (2 * 6 * 4) * 8 + 9 * (9 * 5 * 9) + (2 + 4)) + 2 + (7 * 3 * 3) + 8 + ((2 + 6 + 7) * 9 * (3 + 6 * 5 + 5) + 7 + 3)\n" +
				"2 * 3 + 8 + 3 + (9 * (3 * 7 * 5))\n" +
				"(2 * (6 * 7 + 9 * 6 + 9) * 6 + 2) + 5 * 9\n" +
				"(5 * 3) * 2 * 4 * 6 + 9 * (6 * 7 + 9 + 5 * 9 + 8)\n" +
				"2 * 3 * ((8 * 8 * 7 * 7) * 2 * 7 * 5 + 4) * (3 * (3 + 4 * 7 + 4) + 7 * (2 * 2) * 8) * (6 + 6 * 7 + 6 * 7)\n" +
				"9 * 6 * 9 + 6 * 4 + ((7 * 5 * 8 * 6 * 3) + 2 + 2)\n" +
				"(9 + 7 * 6 * (3 * 8 * 7) * 9 + 9) * 3\n" +
				"6 * 5 * 9 * 5 * 9 * 9\n" +
				"3 + 9 + 8 * 7 * 8 + 4\n" +
				"(3 * (9 * 5 + 8 + 5 + 9)) * 2 * 7\n" +
				"(2 * 9) + (4 * (6 + 4 * 3 * 7 + 4) + (9 * 9 + 8) * 7 + 3) + 7\n" +
				"(5 * 7 + 2 + 4) * 2 * 8 + 7\n" +
				"((7 + 3) + 7 + 3) + 5 + 2\n" +
				"3 * 4 * 7 + ((2 * 2 + 9 + 5 * 9) * 9 * 7 * (3 * 4 * 9 * 5)) + 9\n" +
				"7 * 7 + 9 * (4 * (8 * 8) + 4 + 2) * 4\n" +
				"7 + (4 + 7 + 9 + 3 + 7) + 8 + 7 * (6 + 8 + 9 + (9 + 2 * 5 + 7) + (4 * 9) * (2 * 6))\n" +
				"5 + 9 * (2 + (7 + 5 * 4 * 3 + 4 + 4) + 8 * 8 * (4 * 8))\n" +
				"6 + ((4 * 4) + (2 + 4 + 5 + 9 + 4 * 7) + (6 + 7 * 4 * 7 * 9 * 2) + 8 * 8 * (7 * 4)) + 4 + 9 + 8\n" +
				"(6 + 4) + (3 * 9 + 3) * 4 * 9 * 9 * 8\n" +
				"(6 * 8) * 8 + 4 * 4\n" +
				"7 * 5 * 9 * 7 + 8 + (3 * 8 * (6 * 4 * 7) * 9 * (8 * 3 * 7 + 4 + 7))\n" +
				"(2 * 8 * (7 + 5 * 3 * 6)) * 5\n" +
				"6 * (8 * 9 * (3 * 9 + 4) * 7 * 3 * 6) + 3 + 6\n" +
				"5 * 7 + 5 + 6 * 4 * (3 * 2 + 4 + 6 * (9 * 4 + 3 * 4 * 3 * 3) + 2)\n" +
				"2 * ((4 + 3 * 8 * 2 + 2 + 8) + (6 * 6 + 5 * 4) + 7 + (4 + 4 + 5 + 3 + 5)) + 8 + 7 + 2 + 6\n" +
				"(5 + 6) + 8 * (8 + 6 + 6 + 8 * 8) * 7 * 9 + 7\n" +
				"(3 * 3 + 4) * 7 + (2 * 8 * (5 + 4 * 3 * 6 * 7 + 6) + 9 * 6 * (5 * 2)) * 8 * 6 * 2\n" +
				"7 * 2\n" +
				"(4 * (4 + 5 + 7 * 9 * 7 * 2) + 5) * 7 * 7 * 3 + 7 + 8\n" +
				"2 * 2 * 6 * 9 * (9 * 5 * 4) + (6 + 2 + 7 * 2 * 6 * 3)\n" +
				"9 + 6 + ((4 * 6 + 7 * 8 + 3) + 9 + 8 * 9 + (4 + 4) + 7) * 6 + 3\n" +
				"5 * 2 + ((4 + 2 * 6) + (7 + 9 * 4)) * 7 + 4 + 2\n" +
				"(8 + 6) * 9 + ((4 + 2 + 8 + 7) + 9 * (6 * 8 + 8 * 7 + 5))\n" +
				"2 * (7 + 6) + 3 * 3 * 9\n" +
				"(4 * 8 + (8 * 4 * 2 * 7 * 8) + 5 + 9) * 7 * 3 * 5 + 7\n" +
				"7 + 8 + 5 * 2 * (3 + 3)\n" +
				"5 + 5 * (4 * 4)\n" +
				"2 * (9 + 2 + 9) * (3 * 7 + 2 + 4)\n" +
				"(9 * (8 * 5 + 5 + 4)) * 7 + 6 * 9 + 8 + 3\n" +
				"(3 + 2 + 4 + 2 + (5 * 3) + 3) + (4 * 5 + (2 * 5 * 5) + 9) * 3 * 4\n" +
				"4 * (5 * 8 + 3 * 5 + 5) + 5 + 4\n" +
				"(6 + 5 * 4 + 9 + 8 * 6) + 3 * 5 + (8 + (2 + 4) + 2 * 7 + 3)\n" +
				"5 * 2 * ((3 + 2 + 2 * 7) + 8 * 8) * 4 + 3 * 8\n" +
				"6 + 4 + (4 * 2 * 3 + 7 + 3 * 9) * 2 + 7 + 7\n" +
				"2 + 3 + (3 * 3 + 8) + 8 + (4 + (5 + 8 + 5 + 4) * 9 + (6 * 8 + 7)) * 6\n" +
				"5 * 2 + 4 * (6 * 6)\n" +
				"8 + 4 + (8 * (5 * 5 * 8 + 3 + 5) + 8 * 5) + ((9 * 3 * 4 * 8) + 9 * 7 * 7) * 3 + ((9 * 5 * 4 * 8) * 2 * 2)\n" +
				"5 * 9 * 6 + (9 + 9 + 8 + 8) * 9\n" +
				"7 * 6 * 8 + 6\n" +
				"3 + 5 + 3 * (5 + 3 * 4 + (8 * 4 * 9 + 3) + 4 * 5) + 4\n" +
				"6 + 7 * 8 * 3\n" +
				"4 + 4 + ((9 * 9 * 5) + 3 * (4 + 9)) * 9 + 9\n" +
				"4 + 5 * 3 + (5 * 6 + 4 * 2 + 8) + ((3 + 3 + 9 + 3 + 3) + 5 + 5 * (7 + 6 + 3 * 7) + 9)\n" +
				"3 * 5 * (2 + 5 * 9 + 3) * 7 + (9 * 6 + 5 * 5) * 7\n" +
				"(9 * 2 * 3) * 5 * 9 * 9 + (2 + 2 + 8) * 4\n" +
				"5 * (7 + 7 + (5 * 2 * 3 + 3 * 4 * 8) * 4 + (7 * 6 + 9 * 3 * 9 * 9)) + 6 + 2 + 6 + 9\n" +
				"(9 + 5 + (9 + 7 + 4 + 7 * 7 + 3) * 3) * (5 + (2 + 2 + 4) * 3 * 6 * 5 + 2) * 3 * 4\n" +
				"9 * (5 + 6 + 9 + 2 + 6 + 4) + 7 + 3 * 2 + (7 * 7 * 8 + 7 * 3 + 2)\n" +
				"((9 + 4 + 7 * 4 + 4 + 7) + 6 + (3 + 7)) * 4 + (8 * 2 + 3) + 2 * 3\n" +
				"(6 + 8) * (7 + 3 + 9 + 2 * 5 * 8)\n" +
				"(9 + 6 * 2 * (6 + 8 + 2 * 9 * 9 * 2)) + 7 * 6\n" +
				"(4 + 9 + (7 * 8 * 8 * 4) + 6) + 6 + (8 + 9 * (9 * 5 * 6) * 5 + (4 * 2 + 2) * 7)\n" +
				"8 * (2 * (5 + 2 + 6 + 9) + 8) * 8 + 8 + 6\n" +
				"6 + 8 * 4 * 2 + 2 * 3\n" +
				"4 * (6 + 6 + (6 * 8 * 6 + 8 * 6 + 5) + 2 * 4) * 2 * 9 + 3\n" +
				"4 * (4 + 4) + (5 + (2 * 3) * (4 + 4 + 7 * 4 + 2 + 3) * 6) * 8 * 4\n" +
				"3 * 2 + (3 * 9 * 9)\n" +
				"((5 * 3 + 7) * 5 + 7 + 6 + 2 + 3) * 5 + (9 + (8 + 4 + 2 * 2 * 9) * 8 + 9 * 5) + 7 * 3 * 9\n" +
				"(3 + 3 * 2 * 5) * 2 * 6\n" +
				"8 + 6 + 2 + 9 * (6 + 5 + 4 * 9 + (4 * 7 + 4 + 9 * 6 + 4)) + 5\n" +
				"5 * 7 * (9 * 5 * (8 + 4 * 2 + 5) + (8 + 6 + 7 * 3)) + 2 * 9\n" +
				"(8 * 7 * 2 * 2 * 8 + 6) + ((8 * 7 * 2 + 4 + 5) * 2 + (7 + 8)) + 3 + (9 * 6 * (6 * 9 + 4) * (8 * 9 * 3 * 2 + 3) + 7 * 5) * 2\n" +
				"(2 + 7 * 9 * 6) * (5 + (7 + 8 * 5 + 5 + 4) * 4 * 4 * 2 + 6) + 3 + 2\n" +
				"(6 * 5 + 3) * 5 + 7 + 9\n" +
				"(3 + 7 + 6) * 4 * (8 + 9 * 9 * 7 * (9 + 2) * 8) * 9 + (8 + 3 * 2 + 4 + 9) * 8\n" +
				"4 + ((7 * 5 * 9 * 5 * 7) * (5 + 4 * 3 + 4 + 3) + (7 + 5) + 9) + 9\n" +
				"6 * ((4 + 9 + 8) + (5 * 4 * 6) * 6) * (4 + 5 * 2 + 8 + 2 * 3) * 8\n" +
				"4 + 4 + 4\n" +
				"8 + (8 + 2 + 8 + 4) + (2 * (7 + 7 + 8) + 7 * 5 * 7 + 6) * 3\n" +
				"(2 + 7 + 7 + 2 * 3) * (7 + (6 + 6 * 4 * 6) + 6 + 3) + 5\n" +
				"6 + ((2 * 8 * 8) + (5 + 2 + 4 * 6 + 7 + 5) * 2 + 3 * 4 + 9) * 3\n" +
				"(4 + 6 + (6 + 7) + (2 + 3 + 3 * 4)) + 4 + 2 + 7\n" +
				"(9 * 3 * 9 + 3 + 2) + (9 * (2 + 2 + 2)) * 6 + 6 * 9\n" +
				"3 * 9 * 8 + 8 * (5 * 6) * (4 * 5 + 3 + 6)\n" +
				"(4 * 9 + 2 * 6) * 4 * (9 + 7 * 3 * 5 + 2) * 3 * 4\n" +
				"(5 + (4 * 5 + 6 * 4) * 5 * 7 * 8 * 4) * 3 + 8\n" +
				"2 + ((8 + 3 + 3 + 8 * 6) + 5 * 6 + (3 * 7 * 4)) * 8 + 4 + 6\n" +
				"6 * 4 * 4 * (3 * 9 + (4 * 4) * 4 + 5) * 5\n" +
				"8 * (8 * (8 * 2 * 7 * 8 * 8))\n" +
				"3 * 9 + 5 * ((6 + 6 + 2 * 3 * 7) * (2 + 9 * 3) + (4 + 5) * 5) * 7 * (7 * 4 + 6 * (8 + 4) + 9)\n" +
				"2 + (2 * 4 + 4) + 8 + (5 + 6 + 3 * 3 * 2)\n" +
				"(5 * (7 + 2 + 5 * 7 * 6) * 8 + (3 * 8) * 4) * 3\n" +
				"(5 * 2 * (4 + 8 * 5 + 8) * 4 + 4 + 2) * 7 + 6 * 8 + ((7 * 7) * 4)\n" +
				"3 + ((9 + 8 * 6 + 8 * 4) + 3 * 6) * 5 * 5 * 4 * 2\n" +
				"(4 * 3) + ((6 * 4 * 5) * (9 + 7 * 4 + 2 + 2)) + (6 + 6 + 3 + 2 * 2 + 4) * 7\n" +
				"5 + (4 + 8 * 5 * 8 * 3) * (6 * 5 * 3 * (2 * 7 + 9 * 3 * 3 * 2) * 3) * 3\n" +
				"((4 + 2 + 3 * 8 * 2) * 4 + 6 * 2) * ((5 * 8 * 6) + (6 * 3 * 8 * 8) * 7 * (6 + 2 * 9))\n" +
				"(4 + 2 + (4 * 7 + 3 + 6 * 7 * 4)) + 6 * 7 * 9\n" +
				"5 + ((2 + 7 + 7 + 3) * 6 * 5) + 6 * 3 * 6 * 7\n" +
				"7 * ((4 * 4 * 4 + 3 + 3) * (4 + 4 + 6 + 3 + 3 * 9)) + 4 * 6 * 8 + ((4 + 6) + 4 * 6 + 6 + 3)\n" +
				"9 * (4 * 4 + 5 + 3 * (9 * 7 * 5)) * 6 + 4 * 2 + 6\n" +
				"(5 * 6 * 4 * 4 + 6 * (5 * 4 + 4 + 5 + 4 * 7)) * 6\n" +
				"((3 + 3) + 7 * 3) * 6 * (2 + 5)\n" +
				"(2 * 3 + 3) + (5 * (3 + 2 + 3 + 4 + 8 * 7) * 7 * (4 * 5 * 7) * 8) * (7 + 2 + 2) * 7 * 2 + 7\n" +
				"3 * 6 * 7 * 5 * (9 * 5 * 5)\n" +
				"2 + 8 + ((6 + 2 * 4 * 2) * 8 * 4) + ((5 + 5 + 6) * 7 + 6 * 9 + 6 + 9)\n" +
				"2 * 7 + 2 * 6 * 6 * ((6 * 5 + 7 + 4 + 4 + 2) * 4 + 8)\n" +
				"5 + (2 + 7 * 7) * 3 + 3\n" +
				"(5 + (9 * 8)) * 6 + 4 + 3 * 6\n" +
				"6 * (8 + 5 + 3 * 5) * 8 + 4 + 8 + (4 * 5 * (6 + 8 + 5 + 2) + 6)\n" +
				"4 * 6 + (8 + 3 + 5) + 8\n" +
				"((5 + 6 * 3 * 5) * (8 + 7 + 6 + 5 * 7 * 7) * 8 * 5) * (3 * 7 + 5 * 8 * 2 * 5) + (2 + 7) * 2\n" +
				"(3 + (8 * 9) + 5 + (8 + 9 * 7)) + 4 * 4 * ((8 * 6 + 9 * 9) + (2 * 6 * 8 + 5) + 8) * 3\n" +
				"3 + 6 * (8 * 9) * 9\n" +
				"9 * 9 + 4 * (8 + 5 * 5 * 7 + 4)\n" +
				"4 * ((4 + 6 * 9 + 9 * 2 * 5) + 2 + 2 * 9 * 6) * 7 + ((8 + 2 * 6 + 3 * 2) + 4) + 6\n" +
				"4 + (5 * 9 + 8) * (8 * (6 + 9 * 9 + 3 * 3) + 9 + 2 * (7 * 2) * (5 + 8 * 5)) + 2\n" +
				"(4 + 5 + 6 + 6 + 8 * 8) + 2 * 7 * 4 * (5 * 2 + 6) * 7\n" +
				"(8 + 2 * 3 + 8 * 2 * 9) * 6 + (6 + 6 * 2 + 6) + 9\n" +
				"5 + 7 + (2 + 5 + 4 + 4 * 2 * 6)\n" +
				"((4 * 7 + 7) * 8 * 9 * 8 + (3 + 7 * 3 * 5) + 9) * 3 * 5\n" +
				"(6 + 9 + 5 + 3 + 5) * ((6 + 5) * 8 + 4 * 2)\n" +
				"3 + 6 * (4 + 8 + 5 + 2) + 8 * ((4 + 6 + 6 + 4) * 4) * ((6 * 6) * 3 * 6 + 8 * 7)\n" +
				"(9 * 2 + 5 * 5 + 5) * (3 * (7 * 3 * 9) * 2 * 5 * 4) * 4\n" +
				"7 * ((4 + 7 * 8 + 2 * 5 * 9) + (3 + 8 * 5 + 8) * 2 + 2 + (2 * 6 * 8) * 7) + (8 * 5) * (2 * 2 * 4 * 5) + 7\n" +
				"7 * 3 * 2 * (3 * (7 + 3 + 3 + 9 * 7) * 5 + 4 * 2 + 7) * 7 + (3 * 7 + 8 * (8 + 2 + 9 * 5) * 9 * 3)\n" +
				"4 + 7 + 9 * (6 + (4 + 9 + 6 + 7 + 4) + (6 * 3) * (3 + 3 + 9 * 4 + 8 * 4))\n" +
				"(2 + 7 * 9 * (8 + 5 + 2 + 5 * 7 * 3) * 9 + 5) * 4 + 7\n" +
				"7 * 8 + 2 + 7 + (3 + 7 * 8 * 2) + (6 + 7 + 3)\n" +
				"3 + 3 + (5 * 4 * (2 + 9 + 5 + 8 + 3 + 7) * 4) * 6 + 8 + (3 * 8 * 9)\n" +
				"5 + (9 + (8 * 5 * 7 + 3 + 2) * 3 + 4 * 6 + 6) + 6 * 9 + 7\n" +
				"4 * (4 * 3 * (4 + 6 + 2 * 8 * 7)) * 5 * 6\n" +
				"5 * 5 * 9 * (9 + (8 + 3 * 4 + 3 + 6 * 6) + 7) + 7\n" +
				"9 * 4 * 6 + (4 + 9 * 6 + 4) * (8 + 5 + 9) * 3\n" +
				"7 + 7 * (3 * 7 * 3 + 3 * (4 * 2 * 6)) + (3 + 7 * 6 + (5 * 6) * 5) * (8 + 5) * 7\n" +
				"7 + 4 + 7 * 2\n" +
				"5 + 7 * 2 * 9 + (4 + (5 * 3 + 6 * 6 + 3 * 3))\n" +
				"4 + (3 + 3 + 7 + 2 * 8) + (6 * 7)\n" +
				"((6 + 8 * 6) * 9) + 8 + (5 + (3 + 6 + 9) * 5) + 3 * 3 + 5\n" +
				"6 * (2 + 6 * (8 * 9 + 3 * 4 * 7) * 9) * 9\n" +
				"(8 * 7 * 6) * 7 + 7 * 6 + 3\n" +
				"3 * ((4 + 4 * 6 * 4 * 4 + 5) * 3 * 6 * (3 * 7 + 8 + 5 + 2) * (5 + 5) + 6) + 8\n" +
				"5 * (6 * (9 + 5 + 7 + 8 * 4) + 9 * 3) * (3 * 8 + 3 + (6 * 4 * 3) * 7 * 7) + 5 * (6 * (7 * 4 + 9)) + (8 * 5)\n" +
				"6 * 8 + ((4 * 4 + 4) + 9 * 4 + 8 + 5) + 6\n" +
				"((5 * 6) * 4 * (6 + 3 + 7) * (5 + 7 + 5 * 5) + 6) * 7\n" +
				"(4 * (2 * 9 * 6 * 8 * 9) * (5 * 4 * 3) + (5 * 7)) + 3 + 7\n" +
				"(5 + (3 + 5 * 5 + 2 + 8 * 5) + 7 * 8 * 6 + 7) * 9 * 3 + 7 * 4\n" +
				"(7 * 4 + 4 * 7 + 4) * 6 + 3\n" +
				"6 + 4\n" +
				"(6 * 3 * 9 + 8 + 7 * 5) + ((5 * 9 * 6 + 6 * 7) * (4 * 7 + 9 * 7 * 8) + 2 + (5 * 7 * 7 + 9 * 5) + 4 + 9) * 5 + 5 + 4 * 6\n" +
				"7 * (9 * 2) * (4 + 7 * (2 * 6 * 6))\n" +
				"(7 * 2 + 4) * 2 + 8 + 7 + 3 * ((4 * 7 * 7 * 6) * (8 * 4 * 7 * 2 * 7 + 5))\n" +
				"4 * 9 * 9 + 2 + (3 + (8 + 8 + 8 + 3 + 9) + (5 * 7 + 5 * 3 + 4 * 8) + 6 * 3 * (3 + 3 * 6 * 8))\n" +
				"3 + (9 * 9 * (5 + 9) + 8 * 6 + 3) * 9 + 5 + (7 + 9)\n" +
				"(5 * 7) + 5 * 4 * 6 * 5 * 7\n" +
				"9 * (4 + 4 + 3 + 3 + 6)\n" +
				"3 * 8 * (9 + 3 + 6 + 6 + 8 + 5) + (4 * 2)\n" +
				"3 + 6 + 4 * 6 * (9 * 8 * (7 + 6 * 8 + 9) * 4) + 9\n" +
				"4 * 6 * (6 * 8 * (2 * 8 * 5 + 5) + 8)\n" +
				"9 * 5 * 4 * 9 + (3 + 9 * 4) + 6\n" +
				"5 + 7 + (2 + 2 * (2 * 8) * 2 + 6 + 8) + (9 * 3) * 7\n" +
				"5 + (2 * 3 + (8 * 8 * 2 * 2 * 7 * 7) + 7 + 8 * 4) * 2 + 4\n" +
				"8 * ((6 + 3 + 6 * 3 * 7) + (6 * 5 + 2 * 3 * 4 + 9) + 2 * (9 + 7 * 7)) + 7\n" +
				"7 * (7 * 5 * 3) + 2 + (2 * 6 * 5 * 4 * 3 + 2)\n" +
				"7 + 8 * 4 * 2 * 9 + (8 * 2 + 7)\n" +
				"((4 * 8) * 5 + 2 + 3) * ((8 + 4) + 5) + (6 * (9 + 4) + (2 + 4 * 8 * 9 + 3 + 6) * 5) * ((9 + 9 * 3 * 5 * 8 * 9) + 9 + 3) + 2\n" +
				"2 * ((8 * 3 + 5 + 7 + 3) * 9 + 7 * (2 * 6 * 6) + (7 * 7 + 4 * 9 * 8) * (9 + 9 + 3)) + (3 * 7 + 5 + (5 + 4 * 7) + (2 + 9 + 3 + 5 + 2 + 2) * 2) + 3 + 3 * 4\n" +
				"(6 + 3 * 9 * (7 + 6) * 6) * 5 + 3 * 9\n" +
				"(6 * 9 * (6 + 7 + 6)) + (7 * 8) * 7 * 3 + 5 + ((3 + 2 + 5 * 5) * 9 * 8)\n" +
				"5 * (8 * 9 * 8 + 9 * (5 + 4 + 9 + 5 + 9 + 4)) + 9 + 4 * 3\n" +
				"(8 * 3 + 8 * 3) + 3 + 9 + 8 * 9\n" +
				"(2 * 9 * 4) * 4 + (2 * 4 * 8 + (6 * 2 * 7 + 6) * 7 * 8) + (5 * 5 * 8 + 8) * 5\n" +
				"(7 * 7 + 2) + 7 * 6\n" +
				"5 + 2 * 6 + 8 + (3 + 4 + 9 + 6)\n" +
				"5 + 8 + 8 + 5 * (3 * 3 + 8 * 9) + 6\n" +
				"4 * 4 * ((4 * 4) * 7 * 3) + 6 + 8\n" +
				"3 * 6 + (8 + (8 + 9 + 4 * 5 * 2) + 5 + (3 + 5)) * 3\n" +
				"5 * 3 + (6 + 5 * 4 * 2 * 2) + 9 * 6\n" +
				"5 + 3 + 8 + 6\n" +
				"7 + (9 + 3) + 6\n" +
				"(9 + 5 * 5) * 7 + 9 * 7 * 4 + 9\n" +
				"7 + (8 * 8 + 9 + 3) + 4 + 9 + 4\n" +
				"8 + ((9 + 3) + 9 + (9 * 9 + 2 + 9 + 7 * 2) * 8 + 5 * 2) * 6\n" +
				"(3 * 7 * 3 * 2) * 2 * ((5 * 8 * 7 * 2 + 2) * 9 + 8 * (4 * 5) * 2) + 9 * 6 * 9\n" +
				"3 + 9 + (3 + 7 + 2) * 3 * 9 * 8\n" +
				"(7 * 9 * 7) + 9 + 5 + ((5 * 8) * 6 * (3 * 8) * (7 * 8 * 6 * 2) + 5 * (5 + 5))\n" +
				"3 * 7 + (6 + 4 * 5 * 3 + 4)\n" +
				"3 * 4 * 2 + (4 + 3 + 3 + 7 * (6 * 4 * 7) * (6 * 4 + 5 * 3 * 2))\n" +
				"6 + (8 * 4 * (2 + 5 * 9 + 3) * 7 * 8)\n" +
				"8 + (9 * 7 + 3) + ((2 * 8 * 4 + 9 * 3 * 5) + 3 + 3) * (3 + 9 * 7 * 3 * 2) + 3\n" +
				"2 * 9 * (5 + 8 + (8 + 3 * 9 * 7 * 2 * 4) * 8) * (5 + 7 * (5 + 7 + 2 * 9 + 8 * 4) * 3 + (7 + 7 + 5)) * 9 + 3\n" +
				"(8 + 9 + 7 + 5) * (8 * (4 + 7 * 4 * 3 * 3 * 9)) * 4\n" +
				"((8 * 7 + 3) * 2 + 2) * (4 + 9 * (4 + 2 + 6 * 4 * 4 * 7)) + 5 * 3\n" +
				"9 + (6 * 6 * 8 + 5 + 6) * 8 * 7 * 2 * 4\n" +
				"7 + 5 * 9 * (3 * 7 + 2) + ((7 + 5 + 5 + 3) * 5) + 9\n" +
				"(9 + 7 * 4 * 8) + 8\n" +
				"8 * 5 + 5 * (3 * 2 * 7)\n" +
				"7 * 8 * 5 + (9 * 8 + 7 * (9 + 5 * 7) + 4 * 4) * 5 + 8\n" +
				"(3 + 9 + 6 * (7 * 5) + 5) + 8 * 5 + 8 + 4\n" +
				"8 * 6 + (6 * (4 * 7 + 2) + 4 * 2) * 2\n" +
				"(3 + 8 * 8) + (6 * 7 + 8 + 2 * 3) * (5 + 5) * (5 * 9 * 2 + 8 + 8 * 9)\n" +
				"9 * (6 + 4 + (7 + 6 + 7 + 9 * 8) * 6) * 6 * 5 * 3 * 9\n" +
				"((3 + 9) + 4 * 3 * 3) * 5 + 6 * (6 + 5 * 5)\n" +
				"3 * 2 + ((3 * 3) + 6 * (4 + 8 * 4 * 3 + 6) + 4) * (9 * 4 + 2 * (5 * 4 + 2 + 4 + 7)) * 2 * (7 * (6 + 8 * 5) + 7 * 8 + 2)\n" +
				"(4 + 8 + 5) * ((3 * 2) * 9 + (5 * 6 * 7 + 6 + 8) + 4 + 9 + 6) + 5 * 6 + 4 * 6\n" +
				"(3 * (3 * 9) * 2 + 6 * 8 + 6) * 5\n" +
				"((9 * 8 * 4 * 4) + 5) + (2 + 8 + 6) * 4\n" +
				"(3 * 9 + 6 + 3 + 6 * 7) + 4 * 7 * 7 + 6 + 9\n" +
				"3 * 3 * 5 + 5 * 9 + (3 * (3 + 3) + (3 + 9 + 5 + 4 + 9))\n" +
				"9 * ((6 + 9 * 5 + 3 + 2 + 4) + (8 + 5 + 4 * 6 * 6)) + (6 * 4 + 9 + 8 + 5 + 7)\n" +
				"9 * (8 * 8 * 4 * 8 + 4) * 7\n" +
				"5 * (5 * (6 * 6 + 4 + 7) * 5 * 2 * 5 + 6) + (4 * 5 + 2 + 6 * 6 * 9) * (2 * (5 * 6 + 7 + 8 + 2))\n" +
				"7 * 7 * 3 * 8 * 7\n" +
				"2 + 2 * 9 * (9 * 2 * 2 * 4 + (3 + 4 * 2 * 9 + 9 * 6) * 8) + 4 + 9\n" +
				"(6 + 7) * 4 + 3 * 6 * (9 + 2 + 3)\n" +
				"4 * (6 * 3 * 4) * ((4 * 3) * 7) * ((8 * 7) + 8 + (6 * 9 * 3))\n" +
				"(4 * 4 + 7 + (6 * 6 + 5 * 8) * (8 + 2 + 3) * 8) + 7\n" +
				"2 * (5 * (3 + 7 * 2) + 5 + 8 * 7) * 6 + (9 + (2 + 6 + 9 * 4 + 3) + (9 * 8 * 5 * 6 * 3 * 4) + 9 + 7 + 8) + 8\n" +
				"((7 + 5 + 2) + 6 + 6 * (4 + 8 + 8) + 5) * (4 * 4 * 9 * (4 * 5) + 2 + 5) * 7\n" +
				"2 * 6 + 7 * (7 + 2 + 5 + (5 * 3 * 4 * 9 * 6 * 7) * 9 + 3) + 5\n" +
				"9 + 6 * 7 + ((8 + 2 * 5 + 3 + 5) + (7 + 2 + 9 * 2) + 5) + 5 * 6\n" +
				"8 * (7 * 3 + 7 + 7 + 8) * 3 * (5 * 4 * 2 + 4 * 2)\n" +
				"7 + 7 + 3 * 8 + ((5 + 3 * 7 + 2 * 4 * 4) * 8 * 4 + 7)\n" +
				"8 + 8 + 4 * 3 + 9 * (2 + 5 + 3 * (6 * 2 + 5 + 2 + 2))\n" +
				"7 * ((2 * 5 + 4 + 9 * 2) + 8 * 8) * 2 * 9 * 3\n" +
				"5 * 8 + ((2 * 9 * 8 * 7 + 5) + 2 * 8 + 7) + 5\n" +
				"(8 * (9 + 5 * 3 * 5) * (3 * 3)) + 5 + 2 * 5 + ((4 * 5 * 5 + 3 * 9 + 7) * 5 * (6 + 9 * 5 * 8) + 7) * 8\n" +
				"(4 + (9 * 9) + (4 + 4 * 6) * 5 * (9 + 2)) * 3 + 9\n" +
				"6 + 3 * 3 * (8 * 3 * 5 * (7 + 4 + 6 * 8 + 6 * 9) + 9)\n" +
				"8 + (6 + 7) * 4 * 6\n" +
				"(4 * 5 * 8 + 3 * 2) + 2 + (7 + 2 + 3 * 7 + 6 + 7) * 5\n" +
				"5 + (2 * 7 * 6 + 2 * 9 * 6) * 2 * 3 + 3\n" +
				"8 + (3 + 6 + 2) + 5 + 7 + 4\n" +
				"5 + 9 + ((4 + 9 * 8 * 2 + 7) * 7 + 6 * 9 + 9) * 7\n" +
				"((8 * 7 * 9 + 8 + 9 + 9) + 2 + 5) + 9 + 3 + 4\n" +
				"8 * 6 * (4 + 2 + (4 + 3 * 5) + (7 * 4 + 9 * 9) + 9 + 4) * 4\n" +
				"9 + 3 * 6 * 6 + (9 * 9 * 4 + (7 + 9 + 5 + 7 + 3)) + ((8 * 9 + 9 + 2) + 8 * (8 * 7 * 3 + 6 + 2 * 4))\n" +
				"6 * 3 * 9 + (7 * (6 * 5 + 2 + 7))\n" +
				"5 + 8 * (3 + 5 * (6 * 9 + 5 + 9 + 5))\n" +
				"4 * 7 * 8 * (4 * (7 + 2 + 7 * 8 + 6 + 6) * 6 + 3)\n" +
				"7 + (4 * 6 * 8 + 9 + (6 + 2 + 4 * 7 * 2))\n" +
				"3 + 7 * 5 * 3 * (9 * 4) + 6\n" +
				"(6 * 8 * 9 + 6 + 5) * 9 + 5 * 4 * 7\n" +
				"9 + 4\n" +
				"3 * (3 * 7 * (3 + 3 * 9 + 3 + 5) + 6)\n" +
				"5 + 3 * (2 * 5 * 3) * 4 * 8\n" +
				"6 + ((8 * 7 * 6 + 2 + 5 + 2) + 2) * 7 + 5\n" +
				"3 + (9 + 2) * (4 + (9 + 8 * 2 + 5 + 5 + 5) + 7) * 4 * 2 + 5\n" +
				"7 + 6 * 7 + 8 * (5 * 7 * 9 * 9 + 2)\n" +
				"(9 * (3 * 8 * 9 * 8 + 7)) * 3 + 2 + 2\n" +
				"(4 + 3 * 7 * (9 + 9)) + 5 + 9\n" +
				"2 * 2 * (7 + 6 + 8 + 5 + 8 * 3) + 9 + (4 + 9 * 5 * 7 + 2 + 7) * 9\n" +
				"3 * 2 * (5 * 8 * (5 + 6) * 7 * 2) + 7\n" +
				"9 * 2 * 7 * (9 * 5 * 8 * (5 * 8 * 4 + 5 + 3))\n" +
				"(8 * (3 + 2 * 4 * 4 + 4 * 2) + 2 + 8 + (7 * 3 * 6 * 6 + 5 + 9) * 9) + 5 + 7 * 9\n" +
				"(5 * 3) + 3 * 2\n" +
				"7 * 2 * 9 * 9 * 8 + (7 + 4 + (3 * 6 + 6 + 2) + 5)\n" +
				"9 + ((6 + 2 * 9 * 2) * (7 * 4 * 6 + 3 * 7) + 5 + 9) + (5 + (5 * 4 * 5 * 8 + 8) + 5 * (3 * 2 * 2 + 4 + 3 * 4))\n" +
				"(6 * (8 + 9 + 3 * 3)) + 7 * 6 * 4 + (9 + 4 * 2) + 4\n" +
				"((2 + 2) + (8 * 7 * 6 + 4 * 2 + 6) + 3 + (5 + 8 + 2) * 2) + 6 * 9 + 2\n" +
				"(3 + 6 + 7 * 2) * 9 + (4 * 9 + (2 + 6 + 4) + 4) + 6 + 9\n" +
				"2 + 3 * 3 + 8 + (4 * 4 + 5 + 4 * 4 + 8) * 6\n" +
				"(9 * 3) + 9\n" +
				"8 * 9 + 4 * (7 * 6 + 3 * 3 + 5) * 8\n" +
				"9 + 6 * 7 + 3 * ((8 + 3) + 9 * 3 + 8 + (3 + 7 + 7 * 4) + 7) + 4\n" +
				"9 * 2 + 9 * ((8 + 7 * 8 + 7 + 7 + 4) + 4 * (9 * 8 + 3) * 2 + 4 + (5 * 5 * 5 + 2 + 2 + 9)) * 7\n" +
				"3 + (8 + (6 * 9 + 6 + 9 + 4 + 9) + 5 * 2 + 6 + 6) + (9 * (8 * 2 + 8 * 8 * 9))\n" +
				"5 * (5 + 9 * (8 * 4)) * (7 * 6 * 8) + 2 + 3\n" +
				"9 * 5\n" +
				"6 + 6 + 9 + 4 + (4 + 9 + (3 + 2) * 2 * 6)\n" +
				"(6 * 4 * 7 * 3 + 7) + 5 * (8 * 4 * (4 + 8 * 4) * 9 * 2 * 3) + 9 + 9 * 2\n" +
				"(8 * 4) + (5 * 4 + 4 * 4) * ((5 * 4 * 3 + 8) * 8 * 3 * 3 * 9 * 5) + 3 * (4 * 9 * 6)\n" +
				"8 * 4 * 6 + 2\n" +
				"(7 + 2 + 3 * (8 + 3)) + 2 + 9 * (2 * 2 * (4 + 6 * 6 + 3 * 2 * 8) + 7 + 7) + 8 * 7\n" +
				"3 * (6 + 4 * (5 * 4 + 5 * 4 * 5 * 2) * (5 * 4) + 9) + 4 + 6 + 4 * (5 + 6 * (2 * 7 + 6 + 2))\n" +
				"9 + 8 + (3 * 6 + 7 + 8 * 9 * 4) * 8 * 9 * ((3 * 8 * 8 + 9 * 7 + 6) * 4 * 2 + (2 * 2 + 4 * 3) + (6 * 6 + 9 + 9 + 8) * (8 + 8 * 4))\n" +
				"5 + (7 * 6 * 6 * (3 * 2 * 3 * 6 * 7 + 7) * 7)\n" +
				"9 * 9 + 3 * ((7 * 6 + 5 + 4) * 8 * (7 * 8 + 5 * 8) * (4 + 4 + 8 * 8 * 7 * 7) + 3 + 8) * 6\n" +
				"2 * ((4 + 2 * 9) * (8 * 3) * 7 + 9) * 6 * 5\n" +
				"(3 * (7 + 7 * 2 + 9) + (3 + 8) * 5 * (2 * 4 + 5 + 6 * 9) * 2) + 5 + 8\n" +
				"2 * (2 + 8 + 5 * 6) * 2 + 7\n" +
				"7 + (6 + 3 + 5 * 6 + 7 * 2)\n" +
				"4 + 2 * 3 * (6 + 3 + 5 * 4 + 2) * 9 * (8 * 7 * 5 * 8)\n" +
				"5 + (4 * 2 * 4 + 3 + 7 + 5) * 7 + 7\n" +
				"8 + 2 + 4 + 7 + 2\n" +
				"9 + 4 * 7\n" +
				"6 + 5 * (5 + 9 * 7 * 6 * 5 + 7) * (7 + (6 * 9 * 7 + 5 + 6 * 4) + (9 * 9 + 7 * 9)) * 4 + 5\n" +
				"7 * 7 * (8 * 3 * 3 + 9) + ((2 + 2) + 7 * 7 + 7 + 7 + 3) * 8\n" +
				"2 + (4 * 7 * (7 * 5 * 4 + 5 + 5 + 5) + 7) + 5 + (6 + (9 + 6 + 6 * 3 + 3 + 5) * 2 * 9 + (3 * 7 * 5 + 5)) * (5 * 4 * 2 * 6) * ((7 + 4 + 7 * 2) * 7 + (5 + 7 * 7 * 3 * 4) * 8)\n" +
				"((3 + 4) * (9 + 5 * 7 + 5 * 7 + 5) * 4) * 6 * 4 + 9\n" +
				"(6 * 9 + 5 + (6 + 8 * 8 * 6 + 6) + 6 + 7) + 7 + 5 * 2 + 2\n" +
				"8 * (7 * 4 + 5) * 8\n" +
				"5 + 8 + 9 + (6 + 8) + (6 + 4 * 4 * 4 * 5 + 5) * 5\n" +
				"4 * 6 * 9 + 8 * (2 * 5 + 2 * (6 * 2 + 4 + 7 * 6 * 2)) * ((7 * 3 + 6) + (2 * 9 * 6 * 8 * 5 + 6) + (8 + 8 * 2 * 9 * 7 + 2) + 8 * 7)\n" +
				"4 + 4 + 7 + 5 + 2\n" +
				"3 + (8 * 2 * 4) * 8 * (2 + (8 * 5 + 3 * 4 + 4)) * (2 * (5 * 6))\n" +
				"7 + 8 + 7 + (2 * 7 * 7 * (9 * 8) * 5)\n" +
				"5 + 7 + 9 + 4 * (8 + 6 + 9 * (3 + 9 * 3 + 5 * 3) * 5 + 4) + (8 * (3 * 8))\n" +
				"4 * 2 * ((8 + 8 + 4) * (9 + 9) * 5 * 4 + 5 * 9) * 2\n" +
				"4 + 3 * 4 * 4 * 6\n" +
				"4 + 8 * (5 + 2 * 3 * 8 * 6 * 9) + 6\n" +
				"2 + 7 * (8 * 4 * 8 * 2 * 8 + 6) + 7 + 2\n" +
				"5 + 3 + ((8 + 3) * 6 + (6 * 2 * 9 * 8 * 8 + 3) + 8 * 2 * 7) + 9 + 3 * ((4 + 9 * 5) * 3 * 4 * 3 * 2 + 9)\n" +
				"7 + (8 + (5 + 6 * 4 * 5 + 4 + 2) + (4 * 2) + 3 * 5 + 9) * 5 + 6 * 6\n" +
				"7 + 3 * (9 + 3 + 5 + 2) * 9\n" +
				"8 * 3 + (9 * (4 * 3 * 4) * 6 + 4 * 7) + 5 * 5 + (4 + 5 * (3 * 4 * 8 + 2 + 3 + 2))\n" +
				"(7 * 2 * (7 + 8 * 4 + 7)) * 9 + 5 + 9\n" +
				"4 * 7 * 5 + 3 * 5\n" +
				"9 * 4 * 4 + 2 * (7 * (7 + 8 * 6 * 9 * 4) + (8 + 2) * 3 + 9 + 5) + 2\n" +
				"8 * 7 * 5 + ((5 + 7 + 8 + 4 + 7) + 7 * (9 * 2 + 2) + 9) + 6\n" +
				"5 + 4 + (4 + 5 * 5 * 2)\n" +
				"6 + 7 * 2\n" +
				"9 + (5 + 6 * (3 + 3 * 4 + 3 * 4) * 4 * (8 * 2 + 6 + 6)) * 3 * 3 + 3 + 4\n" +
				"((3 + 6) * 8 * 5 + 8 * 2 * 9) * (4 * 7 + (5 + 6 + 5 + 9 + 4)) + ((5 + 6 * 3 + 2 * 8 * 3) + 2 + 9 + 7) + ((6 + 5 * 5 * 2 + 7) * 9) * 7\n" +
				"2 + 3 + 6 * (4 + 2 + 8) * ((2 * 8 + 4) + (2 + 3 + 3 + 8))\n" +
				"(6 * 2) + 5 * 9 + 2 + ((5 * 7 + 4) * (7 + 4 + 4) * 2 * 7 + (5 + 7 * 2 + 3 + 5) + (6 + 4 + 2)) * 6\n" +
				"4 + (5 * 3 * (6 * 7 * 8 * 4 + 5) * 3) + 2 * 7\n" +
				"((4 + 7 * 9) * 3) + 9 * (6 + 3 + 8 + 2)\n" +
				"4 * 2 + 2 * (9 + 9 * 3 + (9 + 7 * 3 * 3 + 4 + 7) + (8 + 5) + 8) + 8\n" +
				"5 + (8 * 4 + 9) * 2 + 2 * 2 * 5\n" +
				"(5 * 8 * 3 * 5 + (3 * 2 + 9 * 5) * 6) + 5 + 8 + 3 * 2\n" +
				"8 * (2 * (4 + 6 * 3 * 6 * 2 * 2) * (7 + 4 * 9 + 3) + 9)\n" +
				"6 * ((4 * 3) * 6 * (5 * 5 * 6 + 6) + (3 * 2) * 5 * 3)\n" +
				"8 + (3 * 6 + 4 + 9) * 2\n" +
				"2 * 8 * 4 * ((3 * 3 + 9 * 7 * 5) * 7) + 2\n" +
				"(6 + 9 * 2 + 4) * 4 * 4 * 3 + 6 * 8\n" +
				"2 * 7 * 7 + (3 * 8 + 5) + 5 + 7\n" +
				"3 + (9 * 2 + 6 + (4 + 8 + 9 * 5) * 4) * 8\n" +
				"9 * (7 + 8)\n" +
				"8 * (7 + 8 + (5 + 5 * 8) + 7 + 3) + 6\n" +
				"(4 + 2 + 7 * 5) * 9 * 3 + 8 + 7 + ((9 * 4 * 4) + 4 * (6 * 3 * 3 * 6))\n" +
				"(2 * 8 + (8 + 4 * 9 * 6 * 2) * 7) * 9 * 6 * 5\n" +
				"9 + 7 + (4 + 5 + 6 + 3) + 3 * 6\n" +
				"(8 * 2) + 4 + 3 + 7 * 2\n" +
				"(4 * 4 + 4) + 8\n" +
				"6 + 4 + 8\n" +
				"3 * (5 + (2 * 6 * 5 + 7 * 6) + 7 * 2 * 8 * 8) + 8 * 4\n" +
				"8 * 7 * (3 * 4 + 6 + 2 * 9 + 9) * 3 + (3 + 5)";

	}
}
